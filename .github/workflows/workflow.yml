name: Main workflow

on: [push, pull_request]

jobs:
  create_draft_release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}

    steps:
      - name: Create draft release on tags
        id: create_draft_release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    needs: create_draft_release

    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ocaml-version:
          - 4.12.x
        include:
          - os: macos-latest
            suffix: x86_64-apple-darwin
          - os: ubuntu-latest
            suffix: x86_64-unknown-linux-gnu
          - os: windows-latest
            suffix: x86_64-pc-windows-gnu

    env:
      OCAML_VERSION: ${{ matrix.ocaml-version }}
      OS: ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-version }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-version }}
          dune-cache: true

      - name: Set git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions-bot@users.noreply.github.com
      
      - name: Define env (unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "GITHUB_TAG=$(git describe --always --tags)" >> $GITHUB_ENV
          echo "OPAMJOBS=1" >> $GITHUB_ENV
      
      - name: Define env (windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo "GITHUB_TAG=$(git describe --always --tags)" >> $GITHUB_ENV
          echo "OPAMJOBS=1" >> $GITHUB_ENV

      - name: Install dependencies
        if: ${{ !startsWith(runner.os, 'Mac') }}
        run: |
          opam depext tls decompress
          opam install tls decompress

      - name: Build project
        run: |
          opam install --deps-only .
          opam exec -- dune build -p doi2bib

      - name: Check code formatting
        if: ${{ success() && startsWith(runner.os, 'Linux') }}
        run: |
          opam install ocamlformat
          opam exec -- dune build @fmt
      
      - name: Run tests
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: opam exec -- dune runtest

      - name: Build
        run: opam exec -- dune build -p doi2bib

      - name: Create release archive
        if: ${{ startsWith(github.ref, 'refs/tags/') && !startsWith(runner.os, 'Win') }}
        run: opam exec -- tar czf release.tar.gz -C _build/default/bin/ doi2bib.exe

      - name: Create release archive (Windows)
        if: ${{ startsWith(github.ref, 'refs/tags/') && startsWith(runner.os, 'Win') }}
        run: |
          opam exec -- dos2unix .github/scripts/win.sh
          opam exec -- bash .github/scripts/win.sh
          opam exec -- tar czf release.tar.gz out/ 
      
      - name: Upload build artifact
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v2
        with:
          path: release.tar.gz
          name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.suffix }}.tar.gz
          if-no-files-found: error

      - name: Upload release tarball
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: release.tar.gz
          asset_name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.suffix }}.tar.gz
          asset_content_type: application/zip

  cross_compile:
    name: Musl cross compilation build

    needs: [create_draft_release]

    strategy:
      fail-fast: false
      matrix:
        ocaml-version: ["4.12.x"]
        operating-system: [ubuntu-latest]
        arch: [x86_64, arm64]

    runs-on: ${{ matrix.operating-system }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set git user
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions-bot@users.noreply.github.com
      
      - name: Define env
        run: echo "GITHUB_TAG=$(git describe --always)" >> $GITHUB_ENV

      - name: Create esy wrapper
        run: |
          echo '{
            "name": "cross-compile",
            "dependencies": {
              "ocaml": "${{ matrix.ocaml-version }}",
              "doi2bib": "./doi2bib.opam",
              "@opam/dune-configurator": "*",
              "generate": "github:mseri/reason-mobile:generate.json#fe4c49ff4d762b2ec2e2eb65613ec1f7c02335ad"
            },
            "resolutions": {
              "@opam/mtime": "github:dune-universe/mtime:mtime.opam#9584b66cecc891208b31cec4628dd412b8cffe75",
              "@opam/zarith": "github:dune-universe/Zarith:zarith.opam#89ce1c0be0cf32889fcfb2dc20db75fbd6ece52b",
              "@opam/num": "github:dune-universe/num:num.opam#d6ed08654a1068fb4ce029a3337d83f02952ac95",
              "@opam/cmdliner": "github:dune-universe/cmdliner:cmdliner.opam#a89ae0aa42aec20744bc066a753bc586954d06c7",
              "@opam/parsexp": "github:janestreet/parsexp:parsexp.opam#4a4f08e08a9be78db9dd38821e80318cbe47dd96",
              "@opam/uutf": "github:dune-universe/uutf:uutf.opam#6944629f736150f4e5693bc5875228b2ee40bda2",
              "@opam/base": "v0.14.3",
              "@opam/tls": "0.14.1"
            }
          }' > esy.json

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install esy
        run: npm install -g esy

      - name: Create cross compile toolchain lock
        run: esy solve

      - uses: esy/github-action@v1
        with:
          cache-key: bump-${{ matrix.arch }}-${{ hashFiles('esy.lock/index.json') }}

      - name: Create wrapper
        run: esy generate linux.musl.${{ matrix.arch }}

      - name: Install dependencies
        run: esy @linux.musl.${{ matrix.arch }} install

      - name: Build
        run: esy @linux.musl.${{ matrix.arch }} build

      - name: Create release archive
        if: ${{ success() }}
        run: esy @linux.musl.${{ matrix.arch }} -p @_linux.musl.${{ matrix.arch }}/doi2bib sh -c 'tar czf release.tar.gz -C $cur__target_dir/_build/default.linux.musl.${{ matrix.arch }}/bin doi2bib.exe'
      
      - name: Upload build artifact
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v2
        with:
          path: release.tar.gz
          name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.arch }}-unknown-linux-musl.tar.gz
          if-no-files-found: error

      - name: Upload release tarball
        if: ${{ success() && startsWith(github.ref, 'refs/tags/') }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft_release.outputs.upload_url }}
          asset_path: release.tar.gz
          asset_name: doi2bib-${{ env.GITHUB_TAG }}-${{ matrix.arch }}-unknown-linux-musl.tar.gz
          asset_content_type: application/zip
